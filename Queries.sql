-- 1. Select all users and their associated bookings:
SELECT u.name, b.*
FROM "user" u
JOIN booking b ON u.uid = b.uid;


-- 2. Find the total number of reviews for each hotel:
SELECT h.title, COUNT(r.reviewid) AS total_reviews
FROM hotel h
LEFT JOIN room ro ON h.pid = ro.pid
LEFT JOIN booking b ON ro.rid = b.rid
LEFT JOIN review r ON b.bid = r.bid
GROUP BY h.title;


-- 3. Retrieve all hotels and the number of rooms they have:
SELECT h.title, COUNT(r.rid) AS total_rooms
FROM hotel h
LEFT JOIN room r ON h.pid = r.pid
GROUP BY h.title;


-- 4. Show the top-rated rooms along with their hotel information:
SELECT h.title, r.name AS room_name, r.avgrating AS room_rating
FROM hotel h
JOIN room r ON h.pid = r.pid
ORDER BY r.avgrating DESC
LIMIT 10;


-- 5. Display all bookings with user and hotel details:
SELECT u.name AS user_name, h.title AS hotel_title, b.*
FROM booking b
JOIN "user" u ON b.uid = u.uid
JOIN hotel h ON b.pid = h.pid;


-- 6. List all users who have not made any bookings:
SELECT u.*
FROM "user" u
LEFT JOIN booking b ON u.uid = b.uid
WHERE b.bid IS NULL;


-- 7. Calculate the average rating of each hotel:
SELECT h.title, AVG(r.rating) AS avg_rating
FROM hotel h
LEFT JOIN room ro ON h.pid = ro.pid
LEFT JOIN booking b ON ro.rid = b.rid
LEFT JOIN review r ON b.bid = r.bid
GROUP BY h.title;


-- 8. Retrieve the names of users who made bookings in the last month:
SELECT u.name
FROM "user" u
JOIN booking b ON u.uid = b.uid
WHERE b.checkin >= CURRENT_DATE - INTERVAL '1 month';


-- 9. Find the total revenue generated by each hotel:
SELECT h.title, SUM(b.price) AS total_revenue
FROM hotel h
JOIN booking b ON h.pid = b.pid
GROUP BY h.title;


-- 10. Display the names of users who have given reviews:
SELECT DISTINCT u.name
FROM "user" u
JOIN booking b ON u.uid = b.uid
JOIN review r ON b.bid = r.bid;


-- 11. Retrieve the details of the most expensive room booked:
SELECT b.*, r.*
FROM booking b
JOIN room r ON b.rid = r.rid
ORDER BY b.price DESC
LIMIT 1;


-- 12. Show the hotels where the average rating is above 4:
SELECT h.title, AVG(r.rating) AS avg_rating
FROM hotel h
LEFT JOIN room ro ON h.pid = ro.pid
LEFT JOIN booking b ON ro.rid = b.rid
LEFT JOIN review r ON b.bid = r.bid
GROUP BY h.title
HAVING AVG(r.rating) > 4;


-- 13. Retrieve all rooms that are currently available:
SELECT h.title, r.*
FROM hotel h
JOIN room r ON h.pid = r.pid
WHERE r.availability = TRUE;


-- 14. List users and the number of bookings they've made:
SELECT u.name, COUNT(b.bid) AS num_bookings
FROM "user" u
LEFT JOIN booking b ON u.uid = b.uid
GROUP BY u.name;


-- 15. Show the hotels with no bookings:
SELECT h.title
FROM hotel h
LEFT JOIN booking b ON h.pid = b.pid
WHERE b.bid IS NULL;


-- 16. Calculate the total number of guests for each hotel:
SELECT h.title, SUM(r.maxguest) AS total_guests
FROM hotel h
JOIN room r ON h.pid = r.pid
GROUP BY h.title;


-- 17. Retrieve the top 5 users with the most bookings:
SELECT u.name, COUNT(b.bid) AS num_bookings
FROM "user" u
LEFT JOIN booking b ON u.uid = b.uid
GROUP BY u.name
ORDER BY num_bookings DESC
LIMIT 5;


-- 18. Show the hotels and their average room prices:
SELECT h.title, AVG(r.price) AS avg_room_price
FROM hotel h
JOIN room r ON h.pid = r.pid
GROUP BY h.title;


-- 19. Display the reviews and comments for a specific hotel:
SELECT h.title, r.rating, r.comment
FROM hotel h
JOIN room ro ON h.pid = ro.pid
JOIN booking b ON ro.rid = b.rid
JOIN review r ON b.bid = r.bid
WHERE h.title = 'Serenity Retreat';


-- 20. Retrieve the latest review for each hotel:
SELECT h.title, r.rating, r.comment
FROM hotel h
JOIN room ro ON h.pid = ro.pid
JOIN booking b ON ro.rid = b.rid
JOIN (
    SELECT bid, rating, comment
    FROM review
    ORDER BY reviewid DESC
    LIMIT 1
) r ON b.bid = r.bid;
